domain my_domain

service my_service {
    endpoints {
    // add actions, queries, events and signals here
        "
        Primitiva que retorna uma mensagem de olá com o nome do requisitante
        Normalmente no campo who é informado seu próprio nome
        "
        public query helloWorld {
            in {
          //Parametro com o nome do requisitante
                who : string
            }
            out {
                "Saida com a mensagem de olá mundo"
                helloWorldMessage : string
            }
        }

        "Cadastra um novo evento (ex: SeniorTec, Casamento, Aniversário, etc)"
        action cadastrarEvento{
            in {
                nome : string(10)
                "Caso o valor não seja informado, será false"
                apenasColaboradores : boolean? default:false
                lotacaoMaxima : integer minValue: 1 maxValue: 999
                data : date
                tipoEntradaEvento: tipoEntrada?*
            }
            out retornoCadastrarEvento
        }

        "Cadastrar um novo convidado e acompanhantes"
        action cadastrarConvidado{

            in {
                nome : fieldCadastroConvidado
                quantidadeAcompanhantes : integer minValue:0 maxValue:9
            }

            out {
                convidado : fieldCadastroConvidado
                resultado : resultadoCadastradoConvidado
            }

        }

        signal cancelarEvento{
            in {
                codigoEvento: string
            }
        }

        action comprarIngresso{
            in {
                nomeComprador: string
            }

            out {
                codigoIngresso : string
            }
        }

        event ingressoComprado {
            payload {
                codigoIngresso : string
            }
        }

        event pagamentoEstornado{
            payload{
               codigoIngresso : string
            }
        }

        signal estornarPagamentos {
            in {
                 ingressos : string*
            }
        }

    }
    types {
    // define records and enumerations here
        enumeration tipoEntrada {
            LIVRE
            NO_LOCAL
            ANTECIPADO
            LISTA
        }

        enumeration resultadoCadastradoConvidado {
            CADASTRADO_NOVO
            NAO_CADASTRADO_EXISTENTE
            NAO_CADASTRADO_ERRO
        }

        record mensagemRetornoComCodigo{
            mensagemRetorno: string
            codigoCadastrado: string //uuid
            contemErro: boolean?

        }

        record retornoCadastrarEvento extends mensagemRetornoComCodigo {
            //mensagem : mensagemRetornoComCodigo
            nome: string
            apenasColaboradores: boolean?
            lotacaoMaxima: integer
            data: date
            tipoEntradaEvento: tipoEntrada?*
        }

        record fieldCadastroConvidado {
            nome: string(20)
            nomeSocial: string?
        }

    }
    entities {
    // define any entities here

        "Entidade que representa o convidado de evento"
        entity convidado {
            "ID do convidado"
            id: uuid?
            "Nome do convidado"
            nome: string
            "Nome social do convidado"
            nomeSocial : string?
            "CPF do convidado"
            cpf: string
            "Data de nascimento do convidado"
            dataNascimneto: date
        }

        "Entidade que representa o evento"
        entity evento {
            "ID do evento"
            id: uuid?
            "Nome do evento"
            nome: string(30)
            "Data e hora do evento"
            dataHora: dateTime
            "Enderenço do evento"
            endereco: string(50)
            "Tipos de entrada permitidos no evento"
            tipoEntradaEvento: tipoEntrada?*
        }
    }
}